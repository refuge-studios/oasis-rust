/* automatically generated by rust-bindgen 0.71.1 */

pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vec3f_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vec3f_t"][::std::mem::size_of::<vec3f_t>() - 12usize];
    ["Alignment of vec3f_t"][::std::mem::align_of::<vec3f_t>() - 4usize];
    ["Offset of field: vec3f_t::x"][::std::mem::offset_of!(vec3f_t, x) - 0usize];
    ["Offset of field: vec3f_t::y"][::std::mem::offset_of!(vec3f_t, y) - 4usize];
    ["Offset of field: vec3f_t::z"][::std::mem::offset_of!(vec3f_t, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vec2f_t {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vec2f_t"][::std::mem::size_of::<vec2f_t>() - 8usize];
    ["Alignment of vec2f_t"][::std::mem::align_of::<vec2f_t>() - 4usize];
    ["Offset of field: vec2f_t::x"][::std::mem::offset_of!(vec2f_t, x) - 0usize];
    ["Offset of field: vec2f_t::y"][::std::mem::offset_of!(vec2f_t, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tri_indexed_c_t {
    pub v_idx: [usize; 3usize],
    pub tc_idx: [usize; 3usize],
    pub mat_idx: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tri_indexed_c_t"][::std::mem::size_of::<tri_indexed_c_t>() - 56usize];
    ["Alignment of tri_indexed_c_t"][::std::mem::align_of::<tri_indexed_c_t>() - 8usize];
    ["Offset of field: tri_indexed_c_t::v_idx"]
        [::std::mem::offset_of!(tri_indexed_c_t, v_idx) - 0usize];
    ["Offset of field: tri_indexed_c_t::tc_idx"]
        [::std::mem::offset_of!(tri_indexed_c_t, tc_idx) - 24usize];
    ["Offset of field: tri_indexed_c_t::mat_idx"]
        [::std::mem::offset_of!(tri_indexed_c_t, mat_idx) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct material_c_t {
    pub name: *const ::std::os::raw::c_char,
    pub texture: *const ::std::os::raw::c_char,
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub ambient: [f32; 3usize],
    pub exponent: f32,
    pub transparancy: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of material_c_t"][::std::mem::size_of::<material_c_t>() - 64usize];
    ["Alignment of material_c_t"][::std::mem::align_of::<material_c_t>() - 8usize];
    ["Offset of field: material_c_t::name"][::std::mem::offset_of!(material_c_t, name) - 0usize];
    ["Offset of field: material_c_t::texture"]
        [::std::mem::offset_of!(material_c_t, texture) - 8usize];
    ["Offset of field: material_c_t::diffuse"]
        [::std::mem::offset_of!(material_c_t, diffuse) - 16usize];
    ["Offset of field: material_c_t::specular"]
        [::std::mem::offset_of!(material_c_t, specular) - 28usize];
    ["Offset of field: material_c_t::ambient"]
        [::std::mem::offset_of!(material_c_t, ambient) - 40usize];
    ["Offset of field: material_c_t::exponent"]
        [::std::mem::offset_of!(material_c_t, exponent) - 52usize];
    ["Offset of field: material_c_t::transparancy"]
        [::std::mem::offset_of!(material_c_t, transparancy) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bbox_c_t {
    pub min: [f32; 3usize],
    pub max: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bbox_c_t"][::std::mem::size_of::<bbox_c_t>() - 24usize];
    ["Alignment of bbox_c_t"][::std::mem::align_of::<bbox_c_t>() - 4usize];
    ["Offset of field: bbox_c_t::min"][::std::mem::offset_of!(bbox_c_t, min) - 0usize];
    ["Offset of field: bbox_c_t::max"][::std::mem::offset_of!(bbox_c_t, max) - 12usize];
};
pub type oasis_scene_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn oasis_scene_create() -> oasis_scene_t;
}
unsafe extern "C" {
    pub fn oasis_scene_destroy(scene: oasis_scene_t);
}
unsafe extern "C" {
    pub fn oasis_scene_set_vertices(scene: oasis_scene_t, verts: *const vec3f_t, count: usize);
}
unsafe extern "C" {
    pub fn oasis_scene_set_tex_coords(scene: oasis_scene_t, tex: *const vec2f_t, count: usize);
}
unsafe extern "C" {
    pub fn oasis_scene_set_raw_triangles(scene: oasis_scene_t, tris: *const vec3f_t, count: usize);
}
unsafe extern "C" {
    pub fn oasis_scene_set_indexed_triangles(
        scene: oasis_scene_t,
        tris: *const tri_indexed_c_t,
        count: usize,
    );
}
unsafe extern "C" {
    pub fn oasis_scene_set_aabb(scene: oasis_scene_t, bbox: *const bbox_c_t);
}
unsafe extern "C" {
    pub fn oasis_scene_add_material(scene: oasis_scene_t, mat: *const material_c_t);
}
unsafe extern "C" {
    pub fn oasis_scene_add_texture(
        scene: oasis_scene_t,
        name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_uchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
    );
}

